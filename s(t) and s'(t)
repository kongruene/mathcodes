import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Define system of equations for each degree of freedom

# Lateral motion
def lateral_motion(t, y):
    s, s_dot = y
    s_ddot = -0.01026 * s_dot - 105.26 * s + 0.526 * np.sin(np.pi * t)
    return [s_dot, s_ddot]

# Vertical motion
def vertical_motion(t, y):
    s, s_dot = y
    s_ddot = -0.01450 * s_dot - 210.53 * s + 0.789 * np.sin(np.pi * t)
    return [s_dot, s_ddot]

# Torsional motion
def torsional_motion(t, y):
    s, s_dot = y
    s_ddot = -0.00283 * s_dot - 8 * s + 1.333 * np.sin(np.pi * t) * np.cos(s / 6)
    return [s_dot, s_ddot]

# Time range for the simulation
time_span = [0, 10]  # 10 seconds
num_points = 1000  # Number of points for evaluation
t_eval = np.linspace(time_span[0], time_span[1], num_points)

# Initial conditions [s(0), s'(0)]
initial_conditions = [0, 0]

# Solve each system of equations
lateral_solution = solve_ivp(lateral_motion, time_span, initial_conditions, t_eval=t_eval)
vertical_solution = solve_ivp(vertical_motion, time_span, initial_conditions, t_eval=t_eval)
torsional_solution = solve_ivp(torsional_motion, time_span, initial_conditions, t_eval=t_eval)

# Extract solutions
time = lateral_solution.t
s_lateral, s_dot_lateral = lateral_solution.y
s_vertical, s_dot_vertical = vertical_solution.y
s_torsional, s_dot_torsional = torsional_solution.y

# Plot results
plt.figure(figsize=(12, 10))

# Lateral motion
plt.subplot(3, 2, 1)
plt.plot(time, s_lateral, label="s(t)", color="blue")
plt.title("Lateral Motion: Displacement")
plt.xlabel("Time (s)")
plt.ylabel("s(t)")
plt.grid()
plt.legend()

plt.subplot(3, 2, 2)
plt.plot(time, s_dot_lateral, label="s'(t)", color="orange")
plt.title("Lateral Motion: Velocity")
plt.xlabel("Time (s)")
plt.ylabel("s'(t)")
plt.grid()
plt.legend()

# Vertical motion
plt.subplot(3, 2, 3)
plt.plot(time, s_vertical, label="s(t)", color="blue")
plt.title("Vertical Motion: Displacement")
plt.xlabel("Time (s)")
plt.ylabel("s(t)")
plt.grid()
plt.legend()

plt.subplot(3, 2, 4)
plt.plot(time, s_dot_vertical, label="s'(t)", color="orange")
plt.title("Vertical Motion: Velocity")
plt.xlabel("Time (s)")
plt.ylabel("s'(t)")
plt.grid()
plt.legend()

# Torsional motion
plt.subplot(3, 2, 5)
plt.plot(time, s_torsional, label="s(t)", color="blue")
plt.title("Torsional Motion: Displacement")
plt.xlabel("Time (s)")
plt.ylabel("s(t)")
plt.grid()
plt.legend()

plt.subplot(3, 2, 6)
plt.plot(time, s_dot_torsional, label="s'(t)", color="orange")
plt.title("Torsional Motion: Velocity")
plt.xlabel("Time (s)")
plt.ylabel("s'(t)")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
